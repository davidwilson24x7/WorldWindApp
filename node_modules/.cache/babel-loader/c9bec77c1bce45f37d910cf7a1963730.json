{"ast":null,"code":"var _jsxFileName = \"/Users/Wilson/Desktop/worldwind-geomap-b9f8085c45e6bc3408e1f23e3ab337d18b3cb050/src/components/Map/Map.js\";\nimport React, { useState, useEffect } from 'react';\nimport WorldWind from '@nasaworldwind/worldwind';\nimport AnnotationControls from '../AnnotationControls/AnnotationControls';\nimport targetData from \"../../data/target.json\";\nimport walmartData from \"../../data/walmart.json\";\nimport markerRed from './markers/marker-red.png';\nimport markerBlue from './markers/marker-blue.png';\nimport './Map.css';\n\nconst Map = ({\n  map,\n  annotate,\n  setAnnotate,\n  toggledLayer\n}) => {\n  const [wwd, setWwd] = useState(null);\n  const [modal, setModal] = useState(false);\n  const [currModal, setCurrModal] = useState(0);\n  const [annotateObj, setAnnotateObj] = useState(null);\n  const [annotatePos, setAnnotatePos] = useState({\n    lat: 0,\n    lng: 0\n  });\n  const [flatGlobe, setFlatGlobe] = useState(null);\n  const [roundGlobe, setRoundGlobe] = useState(null);\n  useEffect(() => {\n    WorldWind.Logger.setLoggingLevel(WorldWind.Logger.LEVEL_NONE);\n    WorldWind.configuration.baseUrl = \"https://worldwind.netlify.app/\"; // Create a WorldWindow for the canvas.\n\n    let wwdCanvas = new WorldWind.WorldWindow(\"globe\");\n    let roundGlobe = new WorldWind.Globe(new WorldWind.EarthElevationModel());\n    let flatGlobe = new WorldWind.Globe2D();\n    flatGlobe.projection = new WorldWind.ProjectionMercator();\n    setFlatGlobe(flatGlobe);\n    setRoundGlobe(roundGlobe);\n    setWwd(wwdCanvas); // Add layers \n\n    addWorldWindLayers(wwdCanvas); // Add a placemark\n\n    addPlacemark(wwdCanvas, walmartData, markerBlue, \"Walmart\");\n    addPlacemark(wwdCanvas, targetData, markerRed, \"Target\"); // Add listener for annotation editing\n\n    handleAnnotationPicking(wwdCanvas);\n  }, []);\n  useEffect(() => {\n    if (wwd != null) {\n      if (map) wwd.globe = flatGlobe;else wwd.globe = roundGlobe;\n    }\n  }, [map, flatGlobe, roundGlobe, wwd]);\n  useEffect(() => {\n    // Toggle layer based on user input in <Controls />\n    if (wwd != null) toggleLayer(wwd, toggledLayer);\n  }, [toggledLayer, wwd]);\n  useEffect(() => {\n    if (wwd != null) {\n      if (annotate) getAnnotationPos();\n    }\n  }, [annotate, wwd]);\n  /**\n   * Update annotation text\n   * @param annotateText New annotation text\n   */\n\n  const updateAnnotationText = annotateText => {\n    annotateObj.text = annotateText ? annotateText : annotateObj.text;\n    wwd.redraw();\n  };\n  /**\n   * Allow user to select area on map for annotation location\n   * @param isNew Flag specifying if the current annotation is new\n   */\n\n\n  const getAnnotationPos = (isNew = true) => {\n    let globe = document.querySelector('#globe');\n    globe.style.cursor = \"crosshair\";\n    let textLayer = new WorldWind.RenderableLayer(\"Text Layer\");\n    wwd.addLayer(textLayer);\n    let textPlacement = new WorldWind.Offset(WorldWind.OFFSET_FRACTION, 0.5, WorldWind.OFFSET_FRACTION, 0.95);\n    let titleText = new WorldWind.ScreenText(textPlacement, \"Select Annotation Location\");\n    textLayer.addRenderable(titleText);\n    let titleAttributes = new WorldWind.TextAttributes();\n    let textAlignment = new WorldWind.Offset(WorldWind.OFFSET_FRACTION, 0.5, WorldWind.OFFSET_FRACTION, 0.95);\n    titleAttributes.offset = textAlignment;\n    titleAttributes.font = new WorldWind.Font(26);\n    titleText.attributes = titleAttributes;\n\n    let handleClick = function (o) {\n      const x = o.clientX,\n            y = o.clientY;\n      const pickList = wwd.pick(wwd.canvasCoordinates(x, y));\n      let topPickedObject = pickList.topPickedObject();\n\n      if (topPickedObject && topPickedObject.isTerrain) {\n        const {\n          latitude: lat,\n          longitude: lng\n        } = topPickedObject.position;\n        setAnnotatePos({\n          lat,\n          lng\n        });\n        wwd.removeEventListener(\"click\", handleClick, false);\n        wwd.removeLayer(textLayer);\n\n        if (isNew) {\n          setCurrModal(1);\n          toggleModal();\n        } else {\n          annotateObj.position.latitude = lat;\n          annotateObj.position.longitude = lng;\n        }\n\n        wwd.redraw();\n        setAnnotate(false);\n        globe.style.cursor = \"default\";\n      }\n    };\n\n    wwd.addEventListener(\"click\", handleClick); // Detect an escape to cancel\n\n    document.onkeyup = e => {\n      e = e || window.event;\n      let isEscape = false;\n      if (\"key\" in e) isEscape = e.key === \"Escape\" || e.key === \"Esc\";else isEscape = e.keyCode === 27;\n\n      if (isEscape) {\n        // Cancel action\n        document.onkeyup = null;\n        setAnnotate(false);\n        globe.style.cursor = \"default\";\n        wwd.removeLayer(textLayer);\n        wwd.removeEventListener(\"click\", handleClick, false);\n      }\n    };\n  };\n  /**\n   * Creates annotation with user-specified text and position\n   * @param text New annotation text\n   */\n\n\n  const addAnnotation = text => {\n    // Set default annotation attributes.\n    let annotationAttributes = new WorldWind.AnnotationAttributes(null); // annotationAttributes.cornerRadius = 14;\n\n    annotationAttributes.backgroundColor = WorldWind.Color.BLACK;\n    annotationAttributes.drawLeader = true;\n    annotationAttributes.leaderGapWidth = 10;\n    annotationAttributes.leaderGapHeight = 15;\n    annotationAttributes.opacity = 1;\n    annotationAttributes.scale = 1;\n    annotationAttributes.width = 150;\n    annotationAttributes.height = 100;\n    annotationAttributes.textAttributes.color = WorldWind.Color.WHITE;\n    annotationAttributes.insets = new WorldWind.Insets(8, 8, 2, 8); // Set a location for the annotation to point to and create it.\n\n    let location = new WorldWind.Position(annotatePos.lat, annotatePos.lng, 1e2);\n    let annotation = new WorldWind.Annotation(location, annotationAttributes); // Text can be assigned to the annotation after creating it.\n\n    annotation.label = text;\n    annotation.displayName = text; // Create and add the annotation layer to the WorldWindow's layer list.\n\n    let annotationsLayer = new WorldWind.RenderableLayer(\"Annotations\");\n    annotationsLayer.addRenderable(annotation);\n    wwd.addLayer(annotationsLayer);\n    wwd.redraw();\n  };\n  /**\n   * Handles start of annotation editing\n   * @param wwd WorldWindow canvas\n   */\n\n\n  const handleAnnotationPicking = wwd => {\n    let handleDblClick = function (o) {\n      let x = o.clientX,\n          y = o.clientY; // Convert from window coordinates to canvas coordinates\n\n      let pickList = wwd.pick(wwd.canvasCoordinates(x, y)); // Get top layer object\n\n      let topPickedObject = pickList.topPickedObject();\n\n      if (topPickedObject && !topPickedObject.isTerrain) {\n        setCurrModal(0);\n        toggleModal();\n        setAnnotateObj(topPickedObject.userObject);\n        wwd.redraw(); // redraw to make the highlighting changes take effect on the screen\n      }\n    };\n\n    wwd.addEventListener(\"dblclick\", handleDblClick);\n  };\n  /**\n   * Toggles the enabled state of the given layer.\n   * @param wwd WorldWindow canvas\n   * @param toggledLayer Layer toggled by user\n   */\n\n\n  const toggleLayer = (wwd, toggledLayer) => {\n    let layer = wwd.layers.find(x => x.displayName === toggledLayer.name); // If a layer is found\n\n    if (layer !== undefined) {\n      // Toggle the selected layer's visibility\n      layer.enabled = toggledLayer.enabled; // Trigger a redraw so the globe shows the new layer state\n\n      wwd.redraw();\n    }\n  };\n  /**\n   * Add layers to WorldWindow canvas\n   * @param wwd WorldWindow canvas\n   */\n\n\n  const addWorldWindLayers = wwd => {\n    // Create and add layers to the WorldWindow.\n    let layers = [// Imagery layer\n    {\n      layer: new WorldWind.BMNGOneImageLayer(),\n      enabled: true\n    }, {\n      layer: new WorldWind.BingRoadsLayer(null),\n      enabled: true\n    }, // Add atmosphere layer on top of all base layers\n    {\n      layer: new WorldWind.StarFieldLayer(),\n      enabled: true\n    }, {\n      layer: new WorldWind.AtmosphereLayer(),\n      enabled: true\n    }, // WorldWindow UI layers\n    {\n      layer: new WorldWind.CoordinatesDisplayLayer(wwd),\n      enabled: true\n    }, {\n      layer: new WorldWind.ViewControlsLayer(wwd),\n      enabled: true\n    }];\n\n    for (let l = 0; l < layers.length; l++) {\n      for (let key of Object.keys(layers[l])) {\n        layers[l].layer[key] = layers[l][key];\n      }\n\n      wwd.addLayer(layers[l].layer);\n    }\n\n    wwd.redraw();\n  };\n  /**\n   * Add placemark to WorldWindow canvas\n   * @param wwd WorldWindow canvas\n   */\n\n\n  const addPlacemark = (wwd, dataset, marker, displayName) => {\n    let placemark,\n        placemarkAttributes = new WorldWind.PlacemarkAttributes(null),\n        placemarkLayer = new WorldWind.RenderableLayer(displayName); // Set up the common placemark attributes.\n\n    placemarkAttributes.imageOffset = new WorldWind.Offset(WorldWind.OFFSET_FRACTION, 0.3, WorldWind.OFFSET_FRACTION, 0.0);\n    placemarkAttributes.imageSource = marker; // placemarkAttributes.labelAttributes.offset = new WorldWind.Offset(\n    //     WorldWind.OFFSET_FRACTION, 0.5,\n    //     WorldWind.OFFSET_FRACTION, 1.0\n    // );\n\n    for (let data of dataset) {\n      // Create the placemark and its label.\n      placemark = new WorldWind.Placemark(new WorldWind.Position(data.latitude, data.longitude, 0), true, null); // placemark.label = `(${placemark.position.latitude.toPrecision(4)}, ${placemark.position.longitude.toPrecision(5)})`;\n\n      placemark.attributes = placemarkAttributes; // Add the placemark to the layer.\n\n      placemarkLayer.addRenderable(placemark);\n    }\n\n    placemarkLayer.enabled = false; // Add the placemarks layer to the WorldWindow's layer list.\n\n    wwd.addLayer(placemarkLayer);\n  };\n  /**\n   * Toggle whether modal shows\n   * @param modal Modal state\n   */\n\n\n  const toggleModal = () => setModal(!modal);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"fullscreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AnnotationControls, {\n    modal: modal,\n    currModal: currModal,\n    annotateObj: annotateObj,\n    toggleModal: toggleModal,\n    setCurrModal: setCurrModal,\n    addAnnotation: addAnnotation,\n    getAnnotationPos: getAnnotationPos,\n    updateAnnotationText: updateAnnotationText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"canvas\", {\n    width: \"100%\",\n    height: \"100%\",\n    id: \"globe\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }\n  }, \"Your browser does not support HTML5 Canvas.\"));\n};\n\nexport default Map;","map":{"version":3,"sources":["/Users/Wilson/Desktop/worldwind-geomap-b9f8085c45e6bc3408e1f23e3ab337d18b3cb050/src/components/Map/Map.js"],"names":["React","useState","useEffect","WorldWind","AnnotationControls","targetData","walmartData","markerRed","markerBlue","Map","map","annotate","setAnnotate","toggledLayer","wwd","setWwd","modal","setModal","currModal","setCurrModal","annotateObj","setAnnotateObj","annotatePos","setAnnotatePos","lat","lng","flatGlobe","setFlatGlobe","roundGlobe","setRoundGlobe","Logger","setLoggingLevel","LEVEL_NONE","configuration","baseUrl","wwdCanvas","WorldWindow","Globe","EarthElevationModel","Globe2D","projection","ProjectionMercator","addWorldWindLayers","addPlacemark","handleAnnotationPicking","globe","toggleLayer","getAnnotationPos","updateAnnotationText","annotateText","text","redraw","isNew","document","querySelector","style","cursor","textLayer","RenderableLayer","addLayer","textPlacement","Offset","OFFSET_FRACTION","titleText","ScreenText","addRenderable","titleAttributes","TextAttributes","textAlignment","offset","font","Font","attributes","handleClick","o","x","clientX","y","clientY","pickList","pick","canvasCoordinates","topPickedObject","isTerrain","latitude","longitude","position","removeEventListener","removeLayer","toggleModal","addEventListener","onkeyup","e","window","event","isEscape","key","keyCode","addAnnotation","annotationAttributes","AnnotationAttributes","backgroundColor","Color","BLACK","drawLeader","leaderGapWidth","leaderGapHeight","opacity","scale","width","height","textAttributes","color","WHITE","insets","Insets","location","Position","annotation","Annotation","label","displayName","annotationsLayer","handleDblClick","userObject","layer","layers","find","name","undefined","enabled","BMNGOneImageLayer","BingRoadsLayer","StarFieldLayer","AtmosphereLayer","CoordinatesDisplayLayer","ViewControlsLayer","l","length","Object","keys","dataset","marker","placemark","placemarkAttributes","PlacemarkAttributes","placemarkLayer","imageOffset","imageSource","data","Placemark"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport WorldWind from '@nasaworldwind/worldwind';\nimport AnnotationControls from '../AnnotationControls/AnnotationControls';\n\nimport targetData from \"../../data/target.json\";\nimport walmartData from \"../../data/walmart.json\";\n\nimport markerRed from './markers/marker-red.png';\nimport markerBlue from './markers/marker-blue.png';\n\nimport './Map.css';\n\nconst Map = ({ map, annotate, setAnnotate, toggledLayer }) => {\n    const [wwd, setWwd] = useState(null);\n    const [modal, setModal] = useState(false);\n    const [currModal, setCurrModal] = useState(0);\n    const [annotateObj, setAnnotateObj] = useState(null);\n    const [annotatePos, setAnnotatePos] = useState({\n        lat: 0,\n        lng: 0\n    });\n    const [flatGlobe, setFlatGlobe] = useState(null);\n    const [roundGlobe, setRoundGlobe] = useState(null);\n\n    useEffect(() => {\n        WorldWind.Logger.setLoggingLevel(WorldWind.Logger.LEVEL_NONE);\n        WorldWind.configuration.baseUrl = \"https://worldwind.netlify.app/\";\n        // Create a WorldWindow for the canvas.\n        let wwdCanvas = new WorldWind.WorldWindow(\"globe\");\n        let roundGlobe = new WorldWind.Globe(new WorldWind.EarthElevationModel());\n        let flatGlobe = new WorldWind.Globe2D();\n        flatGlobe.projection = new WorldWind.ProjectionMercator();\n        setFlatGlobe(flatGlobe);\n        setRoundGlobe(roundGlobe);\n        setWwd(wwdCanvas);\n        // Add layers \n        addWorldWindLayers(wwdCanvas);\n        // Add a placemark\n        addPlacemark(wwdCanvas, walmartData, markerBlue, \"Walmart\");\n        addPlacemark(wwdCanvas, targetData, markerRed, \"Target\");\n        // Add listener for annotation editing\n        handleAnnotationPicking(wwdCanvas);\n    }, []);\n    useEffect(() => {\n        if (wwd != null) {\n            if(map) wwd.globe = flatGlobe;\n            else wwd.globe = roundGlobe;\n        }\n    }, [map, flatGlobe, roundGlobe, wwd]);\n    useEffect(() => {\n        // Toggle layer based on user input in <Controls />\n        if (wwd != null)\n            toggleLayer(wwd, toggledLayer);\n    }, [toggledLayer, wwd]);\n\n    useEffect(() => {\n        if (wwd != null) {\n            if (annotate)\n                getAnnotationPos();\n        }\n    }, [annotate, wwd]);\n\n    /**\n     * Update annotation text\n     * @param annotateText New annotation text\n     */\n    const updateAnnotationText = annotateText => {\n        annotateObj.text = annotateText ? annotateText : annotateObj.text;\n        wwd.redraw();\n    }\n    /**\n     * Allow user to select area on map for annotation location\n     * @param isNew Flag specifying if the current annotation is new\n     */\n    const getAnnotationPos = (isNew = true) => {\n        let globe = document.querySelector('#globe');\n        globe.style.cursor = \"crosshair\"\n        let textLayer = new WorldWind.RenderableLayer(\"Text Layer\");\n        wwd.addLayer(textLayer);\n        let textPlacement = new WorldWind.Offset(WorldWind.OFFSET_FRACTION, 0.5, WorldWind.OFFSET_FRACTION, 0.95);\n        let titleText = new WorldWind.ScreenText(textPlacement, \"Select Annotation Location\");\n        textLayer.addRenderable(titleText);\n\n        let titleAttributes = new WorldWind.TextAttributes();\n        let textAlignment = new WorldWind.Offset(WorldWind.OFFSET_FRACTION, 0.5, WorldWind.OFFSET_FRACTION, 0.95);\n        titleAttributes.offset = textAlignment;\n        titleAttributes.font = new WorldWind.Font(26);\n        titleText.attributes = titleAttributes;\n\n        let handleClick = function (o) {\n            const x = o.clientX,\n                y = o.clientY;\n            const pickList = wwd.pick(wwd.canvasCoordinates(x, y));\n            let topPickedObject = pickList.topPickedObject();\n            if (topPickedObject && topPickedObject.isTerrain) {\n                const { latitude: lat, longitude: lng } = topPickedObject.position;\n                setAnnotatePos({ lat, lng });\n                wwd.removeEventListener(\"click\", handleClick, false);\n                wwd.removeLayer(textLayer);\n                if (isNew) {\n                    setCurrModal(1);\n                    toggleModal();\n                } else {\n                    annotateObj.position.latitude = lat;\n                    annotateObj.position.longitude = lng;\n                }\n                wwd.redraw();\n                setAnnotate(false);\n                globe.style.cursor = \"default\"\n            }\n        };\n        wwd.addEventListener(\"click\", handleClick);\n        \n        // Detect an escape to cancel\n        document.onkeyup = e => {\n            e = e || window.event;\n            let isEscape = false;\n            if (\"key\" in e) isEscape = (e.key === \"Escape\" || e.key === \"Esc\");\n            else isEscape = (e.keyCode === 27);\n            if (isEscape) {\n                // Cancel action\n                document.onkeyup = null;\n                setAnnotate(false);\n                globe.style.cursor = \"default\"\n                wwd.removeLayer(textLayer);\n                wwd.removeEventListener(\"click\", handleClick, false);\n            }\n        };\n    }\n    /**\n     * Creates annotation with user-specified text and position\n     * @param text New annotation text\n     */\n    const addAnnotation = text => {\n        // Set default annotation attributes.\n        let annotationAttributes = new WorldWind.AnnotationAttributes(null);\n        // annotationAttributes.cornerRadius = 14;\n        annotationAttributes.backgroundColor = WorldWind.Color.BLACK;\n        annotationAttributes.drawLeader = true;\n        annotationAttributes.leaderGapWidth = 10;\n        annotationAttributes.leaderGapHeight = 15;\n        annotationAttributes.opacity = 1;\n        annotationAttributes.scale = 1;\n        annotationAttributes.width = 150;\n        annotationAttributes.height = 100;\n        annotationAttributes.textAttributes.color = WorldWind.Color.WHITE;\n        annotationAttributes.insets = new WorldWind.Insets(8, 8, 2, 8);\n\n        // Set a location for the annotation to point to and create it.\n        let location = new WorldWind.Position(annotatePos.lat, annotatePos.lng, 1e2);\n        let annotation = new WorldWind.Annotation(location, annotationAttributes);\n\n        // Text can be assigned to the annotation after creating it.\n        annotation.label = text;\n        annotation.displayName = text;\n\n        // Create and add the annotation layer to the WorldWindow's layer list.\n        let annotationsLayer = new WorldWind.RenderableLayer(\"Annotations\");\n        annotationsLayer.addRenderable(annotation);\n        wwd.addLayer(annotationsLayer);\n        wwd.redraw();\n    }\n    /**\n     * Handles start of annotation editing\n     * @param wwd WorldWindow canvas\n     */\n    const handleAnnotationPicking = wwd => {\n        let handleDblClick = function (o) {\n            let x = o.clientX,\n                y = o.clientY;\n            // Convert from window coordinates to canvas coordinates\n            let pickList = wwd.pick(wwd.canvasCoordinates(x, y));\n            // Get top layer object\n            let topPickedObject = pickList.topPickedObject();\n            if (topPickedObject && !topPickedObject.isTerrain) {\n                setCurrModal(0);\n                toggleModal();\n                setAnnotateObj(topPickedObject.userObject);\n                wwd.redraw(); // redraw to make the highlighting changes take effect on the screen\n            }\n        };\n        wwd.addEventListener(\"dblclick\", handleDblClick);\n    }\n    /**\n     * Toggles the enabled state of the given layer.\n     * @param wwd WorldWindow canvas\n     * @param toggledLayer Layer toggled by user\n     */\n    const toggleLayer = (wwd, toggledLayer) => {\n        let layer = wwd.layers.find(x => x.displayName === toggledLayer.name);\n        // If a layer is found\n        if (layer !== undefined) {\n            // Toggle the selected layer's visibility\n            layer.enabled = toggledLayer.enabled;\n            // Trigger a redraw so the globe shows the new layer state\n            wwd.redraw();\n        }\n    }\n    /**\n     * Add layers to WorldWindow canvas\n     * @param wwd WorldWindow canvas\n     */\n    const addWorldWindLayers = wwd => {\n        // Create and add layers to the WorldWindow.\n        let layers = [\n            // Imagery layer\n            { layer: new WorldWind.BMNGOneImageLayer(), enabled: true },\n            { layer: new WorldWind.BingRoadsLayer(null), enabled: true },\n            // Add atmosphere layer on top of all base layers\n            { layer: new WorldWind.StarFieldLayer(), enabled: true },\n            { layer: new WorldWind.AtmosphereLayer(), enabled: true },\n            // WorldWindow UI layers\n            { layer: new WorldWind.CoordinatesDisplayLayer(wwd), enabled: true },\n            { layer: new WorldWind.ViewControlsLayer(wwd), enabled: true }\n        ];\n\n        for (let l = 0; l < layers.length; l++) {\n            for (let key of Object.keys(layers[l])) {\n                layers[l].layer[key] = layers[l][key];\n            }\n            wwd.addLayer(layers[l].layer);\n        }\n        wwd.redraw();\n    }\n    /**\n     * Add placemark to WorldWindow canvas\n     * @param wwd WorldWindow canvas\n     */\n    const addPlacemark = (wwd, dataset, marker, displayName) => {\n        let placemark,\n            placemarkAttributes = new WorldWind.PlacemarkAttributes(null),\n            placemarkLayer = new WorldWind.RenderableLayer(displayName);\n\n        // Set up the common placemark attributes.\n        placemarkAttributes.imageOffset = new WorldWind.Offset(\n            WorldWind.OFFSET_FRACTION, 0.3,\n            WorldWind.OFFSET_FRACTION, 0.0\n        );\n        placemarkAttributes.imageSource = marker;\n        // placemarkAttributes.labelAttributes.offset = new WorldWind.Offset(\n        //     WorldWind.OFFSET_FRACTION, 0.5,\n        //     WorldWind.OFFSET_FRACTION, 1.0\n        // );\n\n        for (let data of dataset) {\n            // Create the placemark and its label.\n            placemark = new WorldWind.Placemark(new WorldWind.Position(data.latitude, data.longitude, 0), true, null);\n            // placemark.label = `(${placemark.position.latitude.toPrecision(4)}, ${placemark.position.longitude.toPrecision(5)})`;\n            placemark.attributes = placemarkAttributes;\n            // Add the placemark to the layer.\n            placemarkLayer.addRenderable(placemark);\n        }\n        placemarkLayer.enabled = false;\n        // Add the placemarks layer to the WorldWindow's layer list.\n        wwd.addLayer(placemarkLayer);\n    }\n    /**\n     * Toggle whether modal shows\n     * @param modal Modal state\n     */\n    const toggleModal = () => setModal(!modal);\n\n    return (\n        <div className=\"fullscreen\">\n            <AnnotationControls\n                modal={modal}\n                currModal={currModal}\n                annotateObj={annotateObj}\n                toggleModal={toggleModal}\n                setCurrModal={setCurrModal}\n                addAnnotation={addAnnotation}\n                getAnnotationPos={getAnnotationPos}\n                updateAnnotationText={updateAnnotationText}\n            />\n            <canvas width=\"100%\" height=\"100%\" id=\"globe\">\n                Your browser does not support HTML5 Canvas.\n            </canvas>\n        </div>\n    )\n};\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}